{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Api e-spark",
    "description": "Essa api tem como objetivo facilitar as rotas criadas na aplicação.",
    "contact": {
      "email": "Alefmastertutor@gmail.com"
    }
  },
  "host": "e-spark-back.herokuapp.com",
  "basePath": "/",
  "tags": [],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read_pets": "read your pets",
        "write_pets": "modify pets in your account"
      }
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "/"
        ],
        "description": "Rota inicial da aplicação, apenas mostra o caminho para a documentação e indica se o servidor esta ligado. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "O servidor esta iniciado"
          }
        }
      }
    },
    "/cars": {
      "post": {
        "tags": [
          "Cars"
        ],
        "description": "Route for creating cars",
        "parameters": [
          {
            "name": "cars",
            "in": "body",
            "description": "Receives an object containing name_car, quantity_in_stock, url_img_car",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCars"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "car created",
            "schema": {
              "$ref": "#/definitions/CreateCars"
            }
          },
          "400": {
            "description": "uncreated car",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Unable to create vehicle"
                },
                "cars": {
                  "$ref": "#/definitions/CreateCars"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cars"
        ],
        "description": "Route to list the cars",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of cars",
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          },
          "400": {
            "description": "Erro list cars",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error when trying to list cars"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "delete": {
        "tags": [
          "Cars"
        ],
        "description": "Route to delete one car",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a car already created"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete cars",
            "schema": {
              "$ref": "#/definitions/CreateCars"
            }
          }
        }
      }
    },
    "/cars/description/{id_cars}": {
      "post": {
        "tags": [
          "Cars description"
        ],
        "description": "Route to create description car",
        "parameters": [
          {
            "name": "id_cars",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a car already created"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Body request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarsDescription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Description cars id",
            "schema": {
              "$ref": "#/definitions/CarsDescription"
            }
          }
        }
      }
    },
    "/cars/datasheet/{id_cars}": {
      "post": {
        "tags": [
          "Cars datasheet"
        ],
        "description": "Route for creating datasheet cars",
        "parameters": [
          {
            "name": "id_cars",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a car already created"
          },
          {
            "name": "data",
            "in": "body",
            "description": "body request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarsDatasheet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cars created",
            "schema": {
              "$ref": "#/definitions/CarsDatasheet"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Route for creating users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "body request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Create cars",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "type": "string",
                  "example": "token"
                },
                "message": {
                  "type": "string",
                  "example": "Usuário criado com sucesso!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "invalid e-mail",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Não é possível criar um usuário com esse e-mail"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Ocorreu um erro interno"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Route for list users",
        "parameters": [],
        "responses": {
          "201": {
            "description": "List users",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/{id}/{type?}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Route for update users, using types",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a users already created"
          },
          {
            "name": "type?",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Receives an type (profile, password, profile) a users already created",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "body request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update users",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Route for delete users",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a users already created"
          }
        ],
        "responses": {
          "202": {
            "description": "update users",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "schema": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/userscars": {
      "post": {
        "tags": [
          "Users Cars"
        ],
        "description": "Route for create history of users and cars",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "body request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersCars"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "update users",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "$ref": "#/definitions/UsersCars"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not found user_id or car_id",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/userscars/{id_user}": {
      "get": {
        "tags": [
          "Users Cars"
        ],
        "description": "Route for list history of users and cars",
        "parameters": [
          {
            "name": "id_user",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Receives an id of a users already created"
          }
        ],
        "responses": {
          "200": {
            "description": "list relation Usercars",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "$ref": "#/definitions/UsersCarsHistory"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "description": "Login users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "body request data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "alefmastertutor@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "senha001"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list relation Usercars",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "SUCCESS - Usuário encontrado"
                },
                "data": {
                  "type": "string",
                  "example": "token"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "list relation Usercars",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "ERROR - nenhum usuário encontrado"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "Alef"
        },
        "last_name": {
          "type": "string",
          "example": "Santos Soares"
        },
        "email": {
          "type": "string",
          "example": "Alefmastertutor@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "password321"
        }
      }
    },
    "UsersCars": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "number",
          "example": 1
        },
        "car_id": {
          "type": "number",
          "example": 1
        }
      }
    },
    "UsersCarsHistory": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "id_users": {
            "type": "number",
            "example": 1
          },
          "id_cars": {
            "type": "number",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "example": "2021-06-04T21:04:43.939Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-06-04T21:04:43.939Z"
          },
          "Users_car": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "name_car": {
                "type": "string",
                "example": "BYD_e5"
              },
              "quantity_in_stock": {
                "type": "number",
                "example": 2
              },
              "url_img_car": {
                "type": "string",
                "example": "https://storage.googleapis.com/e-spark-3b3b6.appspot.com/cars/BYD_e5.png?GoogleAccessId=firebase-adminsdk-kc4lz%40e-spark-3b3b6.iam.gserviceaccount.com&Expires=1652196711&Signature=P%2FpzpxiR8lR%2BE48YxaAtCXWqB1kmRnfWR%2BZ24Acty8KDfLMz2YsZ36NKE6ESWIQ%2F%2BPeCSVh8ZfOPZ1YuwZpcojRhW4Nb3QfevZUTazqkavQ6BFZm%2BnCNHKK8FJ3xP3IIzz58WPg7PkYL%2FCkXWa4uPRyLx5BdLBNe1nZe1Z0cTkBu5jpUBpxqLzFsUbSeSE5JuMqnHEWJYVhJZ8kNmQNekI4YroxhfpkixhFOUHqsklF9Vyds4PEGrC9DFP38P4ZZkvSomFg1EjQopEAZ22DIlGu2bpVwv1oqX1VTTYZXhFlQioeiqoRkJULqcLPcb1IQCoB%2BF5GkeTRMPmkkzRWd0Q%3D%3D"
              },
              "createdAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.239Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.239Z"
              }
            }
          }
        }
      }
    },
    "CreateCars": {
      "type": "object",
      "properties": {
        "name_car": {
          "type": "string",
          "example": "fusca"
        },
        "quantity_in_stock": {
          "type": "number",
          "example": 1
        },
        "url_img_car": {
          "type": "string",
          "example": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTQGkzPK9UHC8IHSUlc_z_iD-_UKXvuyZWFHg&usqp=CAU"
        }
      }
    },
    "CarsDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "O melhor da categoria de fuscas, esse carro conta com a melhor tecnologia do mercado"
        },
        "title": {
          "type": "string",
          "example": "Fusca Renovavel"
        },
        "url_img_description": {
          "type": "string",
          "example": "https://www.autoentusiastas.com.br/ae/wp-content/uploads/2019/08/AG-205-Foto-00-1140x720.png"
        },
        "id_cars": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "CarsDatasheet": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string",
          "example": "Volkswagen"
        },
        "model": {
          "type": "string",
          "example": "Fusca"
        },
        "category": {
          "type": "string",
          "example": "Relic"
        },
        "autonomy": {
          "type": "string",
          "example": ""
        },
        "maximum_speed": {
          "type": "number",
          "example": 200
        },
        "acceleration": {
          "type": "string",
          "example": "100km/s"
        },
        "power": {
          "type": "string",
          "example": "60w"
        },
        "transmission": {
          "type": "string",
          "example": "Automatic"
        },
        "occupants": {
          "type": "number",
          "example": 5
        },
        "capacity": {
          "type": "string",
          "example": "200L"
        }
      }
    },
    "Cars": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name_car": {
            "type": "string",
            "example": "BYD_e5"
          },
          "quantity_in_stock": {
            "type": "number",
            "example": 2
          },
          "url_img_car": {
            "type": "string",
            "example": "https://storage.googleapis.com/e-spark-3b3b6.appspot.com/cars/BYD_e5.png?GoogleAccessId=firebase-adminsdk-kc4lz%40e-spark-3b3b6.iam.gserviceaccount.com&Expires=1652196711&Signature=P%2FpzpxiR8lR%2BE48YxaAtCXWqB1kmRnfWR%2BZ24Acty8KDfLMz2YsZ36NKE6ESWIQ%2F%2BPeCSVh8ZfOPZ1YuwZpcojRhW4Nb3QfevZUTazqkavQ6BFZm%2BnCNHKK8FJ3xP3IIzz58WPg7PkYL%2FCkXWa4uPRyLx5BdLBNe1nZe1Z0cTkBu5jpUBpxqLzFsUbSeSE5JuMqnHEWJYVhJZ8kNmQNekI4YroxhfpkixhFOUHqsklF9Vyds4PEGrC9DFP38P4ZZkvSomFg1EjQopEAZ22DIlGu2bpVwv1oqX1VTTYZXhFlQioeiqoRkJULqcLPcb1IQCoB%2BF5GkeTRMPmkkzRWd0Q%3D%3D"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-06-04T21:02:22.239Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-06-04T21:02:22.239Z"
          },
          "Cars_description": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "description": {
                "type": "string",
                "example": "Certificado pelo NCAP com 5 estrelas, o novo e5-300 é 100% elétrico, extremamente silencioso e não emite poluentes. Com amplo espaço interno e porta malas Grande (450 litros), é equipado com KERS (Sistema de regeneração), e One Pedal drive que garantem maior autonomia e conforto."
              },
              "title": {
                "type": "string",
                "example": "BYD e5"
              },
              "url_img_description": {
                "type": "string",
                "example": "https://storage.googleapis.com/e-spark-3b3b6.appspot.com/cars/byd_e5_b.png?GoogleAccessId=firebase-adminsdk-kc4lz%40e-spark-3b3b6.iam.gserviceaccount.com&Expires=1652196715&Signature=W4Zs%2B0K%2FuljjPS0JEKr9YHP4MQ5vzW0tSl4ganu1YHPrdgoYN0BbUyyDZHIC5Pl7UZe%2F5fG1rGqwHURetbwXbOSWkyx69FwqWQojc7flf271mEH4TqgZDl08S2xV7WXvDCs7WcFrkF4gJupi44wAwbqHR0KNpjfegRz9AHcsSw99VzTqQ7pFoZAiJovpyOGnIRnSsbJzcfgeDevGHDRWMHBEnjgn43jC2TEJ%2Fh4Z%2B%2FjOPzpBTV5hwqEcGtI4iPL88sgu7bJoTNNnZtU2MCynS5gqyU3%2B401EGebH58TN57VGAQT9rPKyy06w1Y1PH89l8RCp4ANqdKapMTLK6pugsg%3D%3D"
              },
              "createdAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.483Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.483Z"
              },
              "id_cars": {
                "type": "number",
                "example": 1
              }
            }
          },
          "Cars_datasheet": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "brand": {
                "type": "string",
                "example": "BYD"
              },
              "model": {
                "type": "string",
                "example": "e5"
              },
              "category": {
                "type": "string",
                "example": "Sedan"
              },
              "autonomy": {
                "type": "string",
                "example": "300 km"
              },
              "maximum_speed": {
                "type": "string",
                "example": "130 km/h"
              },
              "acceleration": {
                "type": "string",
                "example": "0 - 100 em 7,6s"
              },
              "power": {
                "type": "string",
                "example": "218 CV"
              },
              "transmission": {
                "type": "string",
                "example": "Automatica de 1(uma) marchas"
              },
              "occupants": {
                "type": "number",
                "example": 5
              },
              "capacity": {
                "type": "string",
                "example": "450 L"
              },
              "createdAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.718Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2021-06-04T21:02:22.718Z"
              },
              "id_cars": {
                "type": "number",
                "example": 1
              }
            }
          }
        }
      }
    }
  }
}